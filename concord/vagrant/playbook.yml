---
- hosts: all
  tasks:
  - name: Install the necessary packages
    become: true
    yum:
      name:
      - docker
      - python-docker-py
      state: present

  - name: Start the Docker daemon
    become: true
    systemd:
      name: docker
      state: started
      enabled: true

  - name: Get local images digests
    delegate_to: localhost
    shell: docker image inspect --format '{{ '{{' }}.Id{{ '}}' }}' walmartlabs/concord-server walmartlabs/concord-agent
    register: local_image_ids
    when: use_local_images

  - name: Get target images digests (if exist)
    become: true
    shell: docker image inspect --format '{{ '{{' }}.Id{{ '}}' }}' walmartlabs/concord-server walmartlabs/concord-agent
    register: target_image_ids
    no_log: true
    ignore_errors: yes
    when: use_local_images
    
  - name: Export local Docker images
    delegate_to: localhost
    shell: docker save -o /tmp/images.tar walmartlabs/concord-server walmartlabs/concord-agent
    when: use_local_images and (local_image_ids.stdout != target_image_ids.stdout)

  - name: Copy Docker images to the VM
    copy:
      src: /tmp/images.tar
      dest: /tmp/images.tar
    when: use_local_images and (local_image_ids.stdout != target_image_ids.stdout)

  - name: Remove the local images archive
    delegate_to: localhost
    file:
      path: /tmp/images.tar
      state: absent
    when: use_local_images and (local_image_ids.stdout != target_image_ids.stdout)

  - name: Import Docker images
    become: true
    shell: docker load -i /tmp/images.tar
    when: use_local_images and (local_image_ids.stdout != target_image_ids.stdout)

  - name: Remove the images archive
    file:
      path: /tmp/images.tar
      state: absent
    when: use_local_images

  - name: Create the conf directory
    become: true
    file:
      path: /opt/concord/conf
      state: directory

  - name: Copy the configuration files
    become: true
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
    loop:
    - { src: "server.conf", dest: "/opt/concord/conf/server.conf" }
    - { src: "agent.conf", dest: "/opt/concord/conf/agent.conf" }

  - name: Start the database
    become: true
    docker_container:
      name: db
      image: library/postgres:10
      env:
        POSTGRES_PASSWORD: "q1"
      restart_policy: always
      state: started
      ports:
      - 5432:5432

  - name: Wait for the DB to start
    wait_for:
      port: 5432
      delay: 3
      timeout: 30

  - name: Start the OpenLDAP server
    become: true
    docker_container:
      name: oldap
      image: osixia/openldap
      restart_policy: always
      state: started

  - name: Start the Concord Server
    become: true
    docker_container:
      name: server
      image: "{{ image_prefix }}/concord-server"
      restart: true
      restart_policy: always
      volumes:
      - /opt/concord/conf:/opt/concord/conf:ro
      links:
      - db
      - oldap
      ports:
      - 8001:8001
      env:
        DB_URL: jdbc:postgresql://db:5432/postgres
        CONCORD_CFG_FILE: /opt/concord/conf/server.conf

  - name: Start the Concord Agent
    become: true
    docker_container:
      name: agent
      image: "{{ image_prefix }}/concord-agent"
      restart: true
      restart_policy: always
      links:
      - server
      volumes:
        - /opt/concord/conf:/opt/concord/conf:ro
      env:
        CONCORD_CFG_FILE: /opt/concord/conf/agent.conf
        CONCORD_DOCKER_LOCAL_MODE: "false"

  - name: Copy the LDAP user file
    copy:
      src: user.ldif
      dest: /tmp/user.ldif

  - name: Create the LDAP user
    become: true
    shell: cat /tmp/user.ldif | docker exec -i oldap ldapadd -x -D "cn=admin,dc=example,dc=org" -w admin
    ignore_errors: yes

  - name: Wait for the API
    uri:
      url: http://127.0.0.1:8001/api/v1/server/ping
      status_code: 200
    register: result
    until: result.status == 200
    retries: 20
    delay: 3
